// Generated by CoffeeScript 2.3.0
var fs, moonc, path, wch;

moonc = require('moonc');

path = require('path');

wch = require('wch');

fs = require('fsx');

// TODO: Start the moonc process.
module.exports = function(log) {
  var build, clear, compile, debug, parseLine, shortPath, watchOptions;
  debug = log.debug('wch-moon');
  shortPath = function(path) {
    return path.replace(process.env.HOME, '~');
  };
  parseLine = function(err) {
    var match;
    if (match = /\[([0-9]+)\]/.exec(err.message)) {
      return -1 + Number(match[1]);
    }
  };
  compile = async function(input, file) {
    var err, line, mtime, output;
    try {
      mtime = fs.stat(file.dest).mtime.getTime();
    } catch (error) {}
    if (mtime && mtime > file.mtime_ms) {
      return;
    }
    debug('Transpiling:', shortPath(file.path));
    try {
      output = (await moonc.promise(input));
      if (typeof output !== 'string') {
        throw Error('moonc failed: ' + file.path);
      }
      return output;
    } catch (error) {
      err = error;
      line = parseLine(err);
      if (line === void 0) {
        wch.emit('file:error', {
          file: file.path,
          message: err.message
        });
        return;
      }
      wch.emit('file:error', {
        file: file.path,
        line: line,
        message: err.message
      });
      log(log.red('Failed to compile:'), shortPath(file.path));
      log(log.gray(err.stack));
    }
  };
  build = wch.pipeline().read(compile).save(function(file) {
    return file.dest;
  }).each(function(dest, file) {
    return wch.emit('file:build', {
      file: file.path,
      dest
    });
  });
  clear = wch.pipeline().delete(function(file) {
    return file.dest;
  }).each(function(dest, file) {
    return wch.emit('file:delete', {
      file: file.path,
      dest
    });
  });
  watchOptions = {
    only: ['*.moon'],
    skip: ['**/__*__/**'],
    fields: ['name', 'exists', 'new', 'mtime_ms'],
    crawl: true
  };
  return {
    attach: function(pack) {
      var changes, dest;
      dest = path.dirname(path.resolve(pack.path, pack.main || 'dist/init'));
      changes = pack.stream('src', watchOptions);
      return changes.on('data', function(file) {
        var action;
        file.dest = path.join(dest, file.name.replace(/\.moon$/, '.lua'));
        action = file.exists ? build : clear;
        return action.call(pack, file);
      });
    },
    stop: function() {}
  };
};

// TODO: Kill the moonc process.
