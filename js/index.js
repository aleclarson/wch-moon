// Generated by CoffeeScript 2.2.4
var compile, fs, getDest, log, moonc, parseLine, path, plugin, wch;

moonc = require('moonc');

path = require('path');

wch = require('wch');

fs = require('fsx');

plugin = wch.plugin();

// TODO: Start the moonc process.
plugin.on('run', function() {
  var files;
  files = plugin.watch('src', {
    fields: ['name', 'exists', 'new', 'mtime_ms'],
    include: ['**/*.moon'],
    exclude: ['__*__']
  });
  files.filter(function(file) {
    return file.exists;
  }).read(compile).save(function(file) {
    return file.dest;
  }).then(function(dest, file) {
    return wch.emit('file:build', {
      file: file.path,
      dest
    });
  });
  return files.filter(function(file) {
    return !file.exists;
  }).delete(getDest).then(function(dest, file) {
    return wch.emit('file:delete', {
      file: file.path,
      dest
    });
  });
});

// TODO: Kill the moonc process.
// plugin.on 'stop', ->
plugin.on('add', function(root) {
  root.dest = path.dirname(root.main || 'dist/init');
  root.getDest = getDest;
});

module.exports = plugin;


// Helpers

({log} = plugin);

getDest = function(file) {
  return path.join(this.path, this.dest, file.name.replace(/\.moon$/, '.lua'));
};

compile = async function(input, file) {
  var err, last_column, line, mtime, output;
  file.dest = this.getDest(file);
  try {
    mtime = fs.stat(file.dest).mtime.getTime();
  } catch (error) {}
  if (mtime && mtime > file.mtime_ms) {
    return;
  }
  if (log.verbose) {
    log.pale_yellow('Transpiling:', file.path);
  }
  try {
    return output = (await moonc.promise(input));
  } catch (error) {
    err = error;
    line = parseLine(err) - 1;
    last_column = input.split('\n')[line].length;
    wch.emit('file:error', {
      file: file.path,
      message: err.message,
      location: [[line, 0], [line, last_column]]
    });
    if (log.verbose) {
      log.red('Failed to compile:', file.path);
      log.gray(err.message);
    }
  }
};

parseLine = function(err) {
  return Number(/\[([0-9]+)\]/.exec(err.message)[1]);
};
